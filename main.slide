Networking deepdive
http://301.sh/2018-fosdem-gonet
12:00 3 Feb 2018
Tags: Go, networking

Michael Hausenblas
Distributed Systems Jester, Red Hat
http://mhausenblas.info
@mhausenblas

* me := fmt.Sprintf("%v", mhausenblas)

- Working on distributed systems in the past 20+ years, in containers space 4+ years
- Container orchestrators (Mesosphere: Mesos/K8S, Red Hat: K8S)
- Web data and big data in applied research AT/IE and MapR
- Developer turned ops
- A Gopher since ~2014, before that Python, Node.js, Java, C++

* Follow along, follow up

- Slide deck: http://go-talks.appspot.com/github.com/mhausenblas/fosdem2018-godevroom-networkingdeepdive/main.slide
- Examples: https://github.com/mhausenblas/fosdem2018-godevroom-networkingdeepdive/tree/master/code
- Images and other artwork also via GitHub repo above
- All content CCBY, so feel free to use and share wherever and whenever you like

* Agenda

- The `net` package
- Socket-level programming
- Timeouts, retries
- Security
- DNS
- Best practices writing networked applications
- Review of non-stdlib packages

* The net package

.image img/net-package.png _ 1000

* The net package

- `net/http` … provides HTTP client and server implementations
- `net/url` … parses URLs and implements query escaping
- `net/rpc` … provides access to the exported methods of an object across a network or other I/O connection
- `net/mail` … implements parsing of mail messages as per RFC 5322 and RFC 6532
- `net/smtp` …  implements the Simple Mail Transfer Protocol as per RFC 5321
- `net/textproto` … implements generic support for text-based request/response protocols in the style of HTTP, NNTP, and SMTP
- `net/internal/socktest` … provides utilities for socket testing

* The net package

.image img/layer-stack.png _ 1000

* The net package

Example: a toy `curl` in a few lines [1/2]

.code -numbers code/callapi/main.go /BEGIN1/,/END1/

* The net package

Example: a toy `curl` in a few lines [2/2]

.code -numbers code/callapi/main.go /BEGIN2/,/END2/

* The net package

Example: app server with HTTP API

For a more complete example see [[https://gist.github.com/enricofoltran/10b4a980cd07cb02836f70a4ab3e72d7][this Gist]], containing code for a minimal server with basic logging, tracing, health check, and graceful shutdown.

* The net package

Example: a simple RPC client/server app

.code -numbers code/rpc/main.go /BEGIN1/,/END1/

* Socket-level programming

- TCP vs UDP
- connections

* Socket-level programming

.code -numbers code/connection/main.go /BEGINC/,/ENDC/


* Timeouts, retries

- https://medium.com/@nate510/don-t-use-go-s-default-http-client-4804cb19f779
- https://blog.cloudflare.com/the-complete-guide-to-golang-net-http-timeouts/
- https://varunksaini.com/blog/backoff-retry-in-golang/

* Security

- `crypto/tls`
- `golang.org/x/crypto`, for example `acme/autocert`
- [[https://github.com/unrolled/secure][unrolled/secure]], HTTP middleware
- [[https://github.com/justinas/nosurf][justinas/nosurf]], a Cross-Site Request Forgery protection middleware for Go
* DNS

Go offers [[https://golang.org/pkg/net/#hdr-Name_Resolution][two options]]:

- Pure Go resolver
- cgo-based resolver

* DNS

.code -numbers code/dns/main.go /BEGINC/,/ENDC/

* DNS

  $ GODEBUG=netdns=cgo go run code/dns/main.go mh9laptop.local
  [192.168.0.17 192.168.99.1 192.168.33.1 fe80::102c:9da1:a044:49f0%en0]


  $ GODEBUG=netdns=go go run code/dns/main.go mh9laptop.local
  panic: lookup mh9laptop.local on 89.101.160.5:53: no such host

  goroutine 1 [running]:
  main.main()
          /Users/mhausenblas/Dropbox/dev/work/src/github.com/mhausenblas/fosdem2018-godevroom-networkingdeepdive/code/dns/main.go:14 +0xfd
  exit status 2


* Best practices writing networked applications

- Be aware of and beware the [[https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing][Fallacies of distributed computing]], see also my [[https://github.com/gophercon/2017-talks][GopherCon 2017 talk]] _Fallacies_ _Of_ _Distributed_ _Gomputing_
- Remember, always implement timeouts & retries, leverage [[https://golang.org/pkg/context/][context]] package
- Pick one: either instrumentation (such as pprof, https://github.com/armon/go-metrics, etc.) or auto-observability solutions, provided by, for example, service meshes such as Istio
- Test, test, test

* Review of non-stdlib packages

- Websockets
- [[https://grpc.io][gRPC]] (Google)
- [[https://github.com/twitchtv/twirp][Twirp]] (Twitch)
- [[https://github.com/apex/gateway][apex/gateway]]
- [[https://github.com/benjojo/dnsfs][benjojo/dnsfs]]
