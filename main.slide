Networking deepdive
http://301.sh/2018-fosdem-gonet
12:00 3 Feb 2018
Tags: Go, networking

Michael Hausenblas
Distributed Systems Jester, Red Hat
http://mhausenblas.info
@mhausenblas

* me := fmt.Sprintf("%v", mhausenblas)

- Working on distributed systems in the past 22+ years
- Past 4+ years into containers (Mesosphere: Mesos/K8S, Red Hat: K8S)
- Before that: big & fast data (MapR) and applied research AT/IE
- I'm ~ developer turned ops
- A Gopher since ~2014, before that mainly Python, Node.js, Java, C++

* Follow along, follow up

Slide deck:
 [[http://go-talks.appspot.com/github.com/mhausenblas/fosdem2018-godevroom-networkingdeepdive/main.slide][fosdem2018-godevroom-networkingdeepdive/main.slide]]

Examples (code and commands):
[[https://github.com/mhausenblas/fosdem2018-godevroom-networkingdeepdive/tree/master/code][fosdem2018-godevroom-networkingdeepdive/tree/master/code]]

Note that:

- Screen shots and other artwork also via GitHub repo above
- All (my) content CCBY

* Agenda

- The `net` package . . . . . . . . . . . . . [[#5][5]]
- Socket-level programming . . .  [[#15][15]]
- Timeouts, retries . . . . . . . . . . . . [[#19][19]]
- Security . . . . . . . . . . . . . . . . . . . . . [[#22][22]]
- DNS . . . . . . . . . . . . . . . . . . . . . . . . [[#24][24]]
- RPC . . . . . . . . . . . . . . . . . . . . . . . .  [[#28][28]]
- Other relevant packages . . . . . [[#30][30]]
- Web frameworks . . . . . . . . . . . . [[#32][32]]
- Best practices . . . . . . . . . . . . . . . [[#35][35]]
- Further reading . . . . . . . . . . . . .  [[#37][37]]

* The net package

* The net package—overview

.image img/net-package.png _ 1000

* The net package—overview

- `net/http` … HTTP client and server implementations
- `net/url` … parses URLs and implements query escaping
- `net/rpc` … access to  exported methods of an object across network
- `net/mail` … parsing of mail messages as per RFC 5322/RFC 6532
- `net/smtp` …  the Simple Mail Transfer Protocol as per RFC 5321
- `net/textproto` … generic support for text-based request/response protocols
- `net/internal/socktest` … utilities for socket testing

* The net package in the layer stack

.image img/layer-stack.png _ 1000

* The net package—curl example

Example: a toy `curl` in a few lines [1/2]

.code -numbers code/callapi/main.go /BEGIN1/,/END1/

* The net package—curl example

Example: a toy `curl` in a few lines [2/2]

.code -numbers code/callapi/main.go /BEGIN2/,/END2/

* The net package—app server example

Example: app server with HTTP API

.code -numbers code/app-server/main.go /BEGIN1/,/END1/

* The net package—app server example

For a more complete example see [[https://gist.github.com/enricofoltran/10b4a980cd07cb02836f70a4ab3e72d7][this Gist]], containing code for a minimal server with basic logging, tracing, health check, and graceful shutdown:

  server := &http.Server{
    Addr:         listenAddr,
    Handler:      tracing(nextRequestID)(logging(logger)(router)),
    ErrorLog:     logger,
    ReadTimeout:  5 * time.Second,
    WriteTimeout: 10 * time.Second,
    IdleTimeout:  15 * time.Second,
  }
  ...
  if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
    logger.Fatalf("Could not listen on %s: %v\n", listenAddr, err)
  }

* The net package—RPC client/server example

Example: a simple RPC client/server app

The client:

.code -numbers code/rpc/client/main.go /BEGIN1/,/END1/

* The net package—RPC client/server example

Example: a simple RPC client/server app

The server:

.code -numbers code/rpc/server/main.go /BEGIN1/,/END1/

* Socket-level programming

* Socket-level programming—network layer

- IPv4 such as `127.0.0.1` … 32 bit, still dominating :(
- IPv6 such as `::1` (which really is `0:0:0:0:0:0:0:1`) … 128 bit, not yet everywhere supported

.image img/ip4vsip6.png _ 600

* Socket-level programming—transport layer

*Ports*: [[https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers][def]]

- well-known or privileged up to `1024` (e.g. `23` or `80`)
- [[http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt][IANA registered]] from `1024` to `49151` (e.g. `2379`)
- ephemeral (up to `65,535`)

Two *types* *of* *transports*:

- connection oriented (TCP), for example used by HTTP
- connection-less/broad-cast (UDP), for example used by DNS

* Socket-level programming—example

.code -numbers code/connection/main.go /BEGIN1/,/END1/

* Timeouts, retries

* Timeouts, retries—basics

- the network and 3rd-party services *are* *not* reliable
- minimal overhead, natively supported
- always use timeouts and retries
- this is a hard requirement for prod-quality software

* Timeouts, retries—guidance

- https://medium.com/@nate510/don-t-use-go-s-default-http-client-4804cb19f779
- https://blog.cloudflare.com/the-complete-guide-to-golang-net-http-timeouts/
- https://varunksaini.com/blog/backoff-retry-in-golang/

* Security

* Security—relevant packages

- `crypto/tls`
- `golang.org/x/crypto`, for example `acme/autocert`
- [[https://github.com/unrolled/secure][unrolled/secure]], HTTP middleware
- [[https://github.com/justinas/nosurf][justinas/nosurf]], a Cross-Site Request Forgery protection middleware for Go

* DNS

* DNS—the Go way

Go offers [[https://golang.org/pkg/net/#hdr-Name_Resolution][two options]]:

- Pure Go resolver
- cgo-based resolver

* DNS—example

.code -numbers code/dns/main.go /BEGINC/,/ENDC/

* DNS—example

  $ GODEBUG=netdns=cgo go run code/dns/main.go mh9laptop.local
  [192.168.0.17 192.168.99.1 192.168.33.1 fe80::102c:9da1:a044:49f0%en0]

  $ GODEBUG=netdns=go go run code/dns/main.go mh9laptop.local
  panic: lookup mh9laptop.local on 89.101.160.5:53: no such host

  goroutine 1 [running]:
  main.main()
          /Users/mhausenblas/Dropbox/dev/work/src/github.com/mhausenblas/fosdem2018-godevroom-networkingdeepdive/code/dns/main.go:14 +0xfd
  exit status 2

* Remote Procedure Call (RPC)

* RPC options

Besides the stdlib offering `net/rpc`:

[[https://grpc.io][grpc.io]] (Google)

- CNCF project
- fast and powerful
- big community
- requires HTTP 2.0

[[https://github.com/twitchtv/twirp][github.com/twitchtv/twirp]] (Twitch)

- simple
- young
- can do non-binary (JSON) representation (debugging!)
- works with HTTP 1.1

* Other relevant non-stdlib packages

* From Websockets to low-level sniffing

- [[https://github.com/gorilla/websocket][github.com/gorilla/websocket]]
- [[https://github.com/apex/gateway][github.com/apex/gateway]]
- [[https://github.com/benjojo/dnsfs][github.com/benjojo/dnsfs]]
- [[https://github.com/google/gopacket][github.com/google/gopacket]]
- [[github.com/mdlayher/ethernet][github.com/mdlayher/ethernet]]

* Web frameworks

* Web frameworks

.image img/timesink.png _ 300

* Web frameworks

Seriously. If you must, read:

[[https://blog.usejournal.com/top-6-web-frameworks-for-go-as-of-2017-23270e059c4b][Top 6 web frameworks for Go as of 2017]]

.image img/webframeworks.jpeg _ 700

But also read:

[[https://medium.com/code-zen/why-i-don-t-use-go-web-frameworks-1087e1facfa4][Why I Don’t Use Go Web Frameworks]]

* Best practices writing networked applications

* Best practices writing networked applications

*General*

- Be aware of and beware the [[https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing][Fallacies of distributed computing]], see also my [[https://github.com/gophercon/2017-talks][GopherCon 2017 talk]] _Fallacies_ _Of_ _Distributed_ _Gomputing_
- Remember, always implement timeouts & retries, leverage [[https://golang.org/pkg/context/][context]] package!
- The 3Ts: test, Test, TEST!

*App* *health* *&* *observability*

- use instrumentation, such as `pprof` or [[https://github.com/armon/go-metrics][armon/go-metrics]], et. al., or
- auto-observability provided by, for example, service meshes such as Istio or Conduit


* Further reading

* Further reading

- [[http://tumregels.github.io/Network-Programming-with-Go/][Network Programming with Go]] by Jan Newmarch
- [[https://blog.envoyproxy.io/introduction-to-modern-network-load-balancing-and-proxying-a57f6ff80236][Introduction to modern network load balancing and proxying]] by Matt Klein
- [[http://polyglot.ninja/golang-making-http-requests/][Golang: Making HTTP Requests]] by masnun
- [[http://rodaine.com/2017/05/x-files-time-rate-golang/][THE X-FILES: CONTROLLING THROUGHPUT WITH RATE.LIMITER]] by Chris Roche
- [[https://ops.tips/blog/sending-files-via-grpc/][Sending files via gRPC]] by Ciro S. Costa
- [[http://www.minaandrawos.com/2016/05/14/udp-vs-tcp-in-golang/][Implementing UDP vs TCP in Golang]] by Mina Andrawos
- [[https://www.youtube.com/watch?v=s5l9ZdgxzXA][Hacking With Go: Packet Crafting and Manipulation in Golang Pt 1]] by SecDevOpsAI
- [[https://blog.gopheracademy.com/advent-2017/kubernetes-ready-service/][Write a Kubernetes-ready service from zero step-by-step]] by Elena Grahovac
